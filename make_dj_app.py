from dataclasses import dataclass, field
from typing import Any, List
from abc import ABCMeta, abstractmethod
from dotenv import load_dotenv
from FFO.item_class import item 

@dataclass 
class MakeFile(metaclass=ABCMeta):
    projectName: str
    appName: str
    
    @abstractmethod
    def makeHere(self):
        ...

@dataclass
class Settings(MakeFile):
    
    def makeHere(self, location):
        fileName = 'settings.py'
        content=f'''
"""
Django settings for {self.projectName} project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-mb0m9f5ucp+**!mvie2y0izrxo@9+9+cet6^#hrsca!6anshg2"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # my Apps @ the bottom
    "{self.appName}",
    "livereload",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # put this at the bottom
    "livereload.middleware.LiveReloadScript",
]

ROOT_URLCONF = "{self.projectName}.urls"

TEMPLATES = [
    {{
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {{
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        }},
    }},
]

WSGI_APPLICATION = "{self.projectName}.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {{
    "default": {{
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }}
}}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

# settings.py
AUTH_USER_MODEL = "{self.appName}.CustomUser"

AUTH_PASSWORD_VALIDATORS = [
    {{
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    }},
    {{
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    }},
    {{
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    }},
    {{
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    }},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField" 
'''
        item.mkfileOverwrite(fileName, location, content)

@dataclass
class Urls(MakeFile):
    
    def makeHere(self, location):
        fileName = 'urls.py'
        content=f'''
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
 path('admin/', admin.site.urls),
 path('', include('{self.appName}.urls')),  

]
'''
        item.mkfileOverwrite(fileName, location, content)

@dataclass
class BaseHTML(MakeFile):
    
    def makeHere(self, location):
        fileName = 'base.html'
        content='''
{% load static %}

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Title</title>
    <link rel="stylesheet" href="{% static 'CSS/styles.css' %}" />
    <!-- HTMX -->
    <script src="https://unpkg.com/htmx.org@1.6.0"></script>
    <!-- Alpine Plugins -->
    <script
      defer
      src="https://unpkg.com/@alpinejs/collapse@3.x.x/dist/cdn.min.js"
    ></script>

    <!-- Alpine Core -->
    <script
      defer
      src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"
    ></script>
  </head>

  <body>
    <div class="topLevel">{% block content %} {% endblock %}</div>
  </body>
</html>
'''
        item.mkfileOverwrite(fileName, location, content)

@dataclass
class CreateViewHTML(MakeFile):
    
    def makeHere(self, location):
        fileName = 'CreateView.html'
        content='''
{% extends "base.html" %}

{% block content %}

<form action="/your-name/" method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Submit">
</form>

{% endblock %}
'''
        item.mkfileOverwrite(fileName, location, content)

@dataclass
class ListViewHTML(MakeFile):
    
    def makeHere(self, location):
        fileName = 'ListView.html'
        content='''
{% extends "base.html" %}
{% load my_tags %}

{% block content %}

<h1>hello from listview</h1>

{% endblock %}
'''
        item.mkfileOverwrite(fileName, location, content)

@dataclass
class UpdateViewHTML(MakeFile):
    
    def makeHere(self, location):
        fileName = 'UpdateView.html'
        content='''
{% extends "base.html" %} {% block content %}

<h1>Update View</h1>

<form method="post">
  {% csrf_token %} {{form}}
  <div
    class="submitButton"
    hx-post="{% url 'ListView' %}"
    hx-trigger="click"
    hx-target="#topLevel"
    hx-swap="outerHTML"
    hx-vals='{"Update":"{{model.id}}"}'
  >
    Submit
  </div>
</form>

{% endblock %}
'''
        item.mkfileOverwrite(fileName, location, content)


@dataclass
class MyTags(MakeFile):
    
    def makeHere(self, location):
        fileName = 'my_tags.py'
        content='''
from django import template
from django.http import HttpResponse

register = template.Library()

@register.filter
def getItem(dictionary, key):
    return dictionary.get(key)

@register.filter
def getType(obj):
    return type(obj)

@register.filter
def firstName(obj):
    return str(obj).split(' ')[0]
'''
        item.mkfileOverwrite(fileName, location, content)



def mkdirs(appPath):
    dirs = [r"templates",r"templates\accounts",r"templatetags",r"static",r"static\js",r"static\img"]
    for folder in dirs:
        item.mkdir(folder, appPath)
    
    # accounts = ["login.html","logout.html","register.html"]
    # for file in accounts:
    #     item.mkfileOverwrite(file, appPath +r"\accounts", '')

#     createViewHTML ='''
# {% extends "base.html" %}

# {% block content %}

# <form action="/your-name/" method="post">
#     {% csrf_token %}
#     {{ form.as_p }}
#     <input type="submit" value="Submit">
# </form>

# {% endblock %}
# '''
#     item.mkfileOverwrite('CreateView.html', str($appPath / "templates"), createViewHTML)
#     listViewHTML = '''
# {% extends "base.html" %}
# {% load my_tags %}

# {% block content %}

# <h1>hello from listview</h1>

# {% endblock %}
# '''
#     item.mkfileOverwrite('ListView.html', str($appPath / "templates"), listViewHTML)
#     updateViewHTML = '''
# {% extends "base.html" %} {% block content %}

# <h1>Update View</h1>

# <form method="post">
#   {% csrf_token %} {{form}}
#   <div
#     class="submitButton"
#     hx-post="{% url 'ListView' %}"
#     hx-trigger="click"
#     hx-target="#topLevel"
#     hx-swap="outerHTML"
#     hx-vals='{"Update":"{{model.id}}"}'
#   >
#     Submit
#   </div>
# </form>

# {% endblock %}
# '''
#     item.mkfileOverwrite('UpdateView.html', str($appPath / "templates"), updateViewHTML)
    
#     accounts = ["login.html","logout.html","register.html"]
#     for item in acounts:
#         item.mkfileOverwrite(item, str($appPath / "templates" / "accounts"), '')