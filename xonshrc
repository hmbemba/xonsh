# Imports----------------------------------------
from dataclasses import dataclass
import pyperclip
import os
import subprocess
from pathlib import Path
from FFO.item_class import item
from FFO.folder_class import Folder
import xonsh
import pprint
from functools import wraps
import platform
import socket
import re
import uuid
import json
import psutil
from dotenv import load_dotenv
from tabulate import tabulate
import datetime
from XSH_Files.OpenDir.OpenDirectory_Model_V1 import *
from XSH_Files.Demos.Demos_Model_V1 import DemosModel
from rich.console import Console
from rich.table import Table
from string import Template
from pipe import where, select

load_dotenv()

# Sources--------------------------------------------------------
### Must source first---------------
source fr'{Path($XONSHRC[0]).parent}\XSH_Files\env.xsh'
source r'C:\ProgramData\xonsh\XSH_Files\catch.xsh'

## Secondary sources--------------
#source fr'{$xonshdir}\XSH_Files\digital_ocean.xsh'
source fr'{$xonshdir}\XSH_Files\edgedb.xsh'
source fr'{$xonshdir}\XSH_Files\git.xsh'
source fr'{$xonshdir}\XSH_Files\music_theory.xsh'
source fr'{$xonshdir}\XSH_Files\python.xsh'
source fr'{$xonshdir}\XSH_Files\powershell.xsh'
source fr'{$xonshdir}\XSH_Files\docker.xsh'
source fr'{$xonshdir}\XSH_Files\apps.xsh'
source fr'{$xonshdir}\XSH_Files\misc.xsh'
source fr'{$xonshdir}\XSH_Files\xonsh_related.xsh'
source fr'{$xonshdir}\XSH_Files\music.xsh'
source fr'{$xonshdir}\XSH_Files\mysite\sdb.xsh'
source fr'{$xonshdir}\XSH_Files\nim.xsh'
source fr'{$xonshdir}\XSH_Files\cpp.xsh'
source fr'{$xonshdir}\XSH_Files\anki.xsh'
source fr'{$xonshdir}\XSH_Files\OpenDir\openDir.xsh'
source fr'{$xonshdir}\XSH_Files\Demos\demos.xsh'
source fr'{$xonshdir}\XSH_Files\cookiecutter\cookiecutter.xsh'
source fr'{$xonshdir}\XSH_Files\pipes.xsh'



# Xontribs
xontrib load vox

## Load
pp = pprint.PrettyPrinter(indent=4)




def format(svgPath: str) -> str:
    svgName = Path(svgPath).stem.lower().replace(' ', '_')
    with open(svgPath) as f:
        svgContent = f.read()

    return f'''
    {{% macro {svgName}() -%}}
        {svgContent}
    {{%- endmacro %}}
    '''

def appendTo(content, fileToAppend):
    with open(fileToAppend,'a') as f:
	    f.write(content) 



class WTForm:

    # make sure the macro_block comes back as a string
    __xonsh_block__ = str

    def __enter__(self):
        # parse and return the block on entry
        self.root = self.macro_block
        return self

    def __exit__(self, *exc):
        # no reason to keep these attributes around.
        del self.macro_block, self.macro_globals, self.macro_locals

    def raw(self):
        return self.root
    
    def eval(self):
        for line in self.root.split('\n'):
            if ':' in line:
                print(line)
    
    def run(self):
        print(f'running {self.root}')

with! WTForm() as f:
    email:
         required
         validateEmail
         class = 'btn blue 200'


