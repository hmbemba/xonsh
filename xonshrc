# XONSH WEBCONFIG START
#$XONSH_COLOR_STYLE = 'dracula'
# XONSH WEBCONFIG END

from dataclasses import dataclass
import os
import subprocess
from pathlib import Path
from FFO.item_class import item
from FFO.folder_class import Folder
import xonsh
import pprint
import datetime
from dotenv import load_dotenv
import json
from make_dj_app import Settings, Urls, BaseHTML, CreateViewHTML, ListViewHTML,UpdateViewHTML, mkdirs
load_dotenv()

#from commands import Option

xontrib load vox
pp = pprint.PrettyPrinter(indent=4)
#$PROMPT = '{user}@{hostname}:{cwd}:{env_name: {}}>' 

$home = Path($HOMEPATH[0])
$HOME = $home
$desktop = Path($HOMEPATH[0]) / "Desktop"
$scripts = $desktop / 'Scripts'
$python = $scripts / 'Python'
$apps = $python / 'Apps'
$ahk = $scripts / 'AHK'
$env = ${...}
$pwd = os.getcwd
$XONSH_SHOW_TRACEBACK = True
$xonshdir = Path($XONSHRC[0]).parent
$ssh = r"C:\Users\hmbem/.ssh/"


commands = str(Path($XONSHRC[0]).parent / "commands.py")

def _start(arg):
    if not arg:
        raise Exception("you need an argument")
    subprocess.run(["powershell.exe", f"start-process {arg[0]}"])

def _venv():
    subprocess.run(["python.exe", commands, "make_venv"])
    vox enter "venv"
    subprocess.run(["python.exe", commands, "make_main_dot_py"])
    subprocess.run(["python.exe", commands, "make_vscode_folder"])
    subprocess.run(["python.exe", commands, "make_settings_dot_json"])
    subprocess.run(["python.exe", commands, "make_readme"])
    subprocess.run(["python.exe", commands, "make_gitignore"])
    item.mkfileNoOverwrite(".env")
    item.mkfileNoOverwrite(".dockerignore",'.',content='*/venv')
    item.mkfileNoOverwrite("dockerfile")
    pip install flake8 black pytest python-dotenv refurb
    pip freeze > requirements.txt
    
    git init
    git add . #// this will stage your files for thier first commit
    git status #//see all the files you have staged for commit
    git commit -m "First Commit" #//your first commit with a comment
    
def _gitpush(arg):
    git add '.'
    git status
    git commit -m arg
    git push origin master

def _workon(arg):
    import datetime

    tempProjectsFolder = fr"{$scripts}\Temp_Projects"
    item.FolderExistsOrError(tempProjectsFolder)
    date = datetime.datetime.now().strftime(r'%m-%d-%y_%H-%M') #MM-dd-yy_hh-mmtt
    
    name = f"{arg[0]}_{date}"
    fullPath = Path(f"{tempProjectsFolder}\\{name}")


    if arg[0] == "show":
        subprocess.run(["powershell.exe", f"start-process {tempProjectsFolder}"])
        exit
    
    else:
        Path.mkdir(fullPath)
        subprocess.run(["powershell.exe", f"code {fullPath}"])
        exit 

def _commands():
    pp.pprint(list(__xonsh__.aliases)[52:])

def _sdb(arg):
    cd fr"{$desktop}\Scripts\Python\Apps\Songdb"
    vox enter venv

def timestamp() -> str:
    dt = datetime.datetime.now()
    return dt.strftime("%m_%d_%Y-%I_%M%p")

def _sp():
    if $COMPUTERNAME != 'DESKTOP-I5FROLF':
        raise Exception('Wrong Computer')
    t = timestamp()
    item.mkdir(f"StudioPics_{t}", r"V:\Projects\IG Content\Studio Pics")
    loc = fr"V:\Projects\IG Content\Studio Pics\StudioPics_{t}"
    item.mkdir(f"Unedited", loc)
    item.mkdir(f"Edited", loc)
    subprocess.run(["powershell.exe", f'start-process "{loc}"'])
    subprocess.run(["powershell.exe", fr'start-process "C:\ProgramData\Microsoft\Windows\Start Menu\Luminar AI.lnk"'])


def _openDirectory(arg):
    def help():
        print("Open Directory Coomnad\n")
        print('Available Options\n')
        for option in options:
            print('\t',option['key'], ' : ', f'"{option["path"]}"',' | ', option['note'], '\n' )

    options = [
        {
            'key':'apps',
            'path':fr"{$desktop}\Scripts\Python\Apps",
            'note':'Apps folder in Python dir'
        },
        {
            'key':'scripts',
            'path':$scripts,
            'note':'Scripts folder'
        },
        {
            'key':'py',
            'path':$python,
            'note':'Python dir in Scripts folder'
        },
        {
            'key':'python',
            'path':$python,
            'note':'Python dir in Scripts folder'
        },
        {
            'key':'ahk',
            'path':$ahk,
            'note':'AHK dir in Scripts folder'
        },
        {
            'key':'stupics',
            'path':r"V:\Projects\IG Content\Studio Pics",
            'note':'Studio Pics Folder'
        }
    ]

    if not arg:
        help()
    else:
        if arg[0] not in [option['key'] for option in options]:
            help()
        else:
            for option in options:
                if arg[0] == option['key']:
                    subprocess.run(["powershell.exe", f'start-process "{option["path"]}" '])

def _runFile(arg):
    def help():
        print("Run File Command\n")
        print('Available Options\n')
        for option in options:
            print('\t',option['key'], ' : ', f'"{option["path"]}"',' | ', option['note'], '\n' )

    options = [
        {
            'key':'pysnip',
            'path':fr"{$ahk}\Code_Snippets\Python_Snippets\Python_Snippets.ahk",
            'note':'Python Snippets'
        },

    ]

    if not arg:
        help()
    else:
        if arg[0] not in [option['key'] for option in options]:
            help()
        else:
            for option in options:
                if arg[0] == option['key']:
                    subprocess.run(["powershell.exe", f'start-process "{option["path"]}" '])


def _editFile(arg):
    def help():
        print("Edit File Command\n")
        print('Available Options\n')
        for option in options:
            print('\t',option['key'],' : ', f'"{option["note"]}"', '\n' )
    
    options = [
        {
            'key':'pysnip',
            'editStr':fr"code {$ahk}\Code_Snippets\Python_Snippets\Python_Snippets.ahk",
            'note':'Edit Python Snippets'
        },
        {
            'key':'sdb',
            'editStr':fr"code {$desktop}\Scripts\Python\Apps\Songdb",
            'note':'Edit Songdb'
        },
        {
            'key':'todo',
            'editStr':fr"code C:\Users\hmbem\Desktop\Scripts\Python\Apps\Todo\TaskInstances.py",
            'note':'Edit Todo App'
        },
    ]

    if not arg:
        help()
    else:
        if arg[0] not in [option['key'] for option in options]:
            help()
        else:
            for option in options:
                if arg[0] == option['key']:
                    filePath = option['editStr'].split(' ')[1]
                    if not Path(filePath).exists():
                        raise Exception(f'Path "{filePath}" not found')
                    subprocess.run(["powershell.exe", f'{option["editStr"]}'])

def _openXonsh():
    subprocess.run(['powershell.exe', f'code "{Path($XONSHRC[0]).parent}"'])
    exit

def _openXonshRC():
    subprocess.run(['powershell.exe', f'code "{Path($XONSHRC[0])}"'])
    exit

def _newFLProj(projName:str):
    folders = [
        projName[0],
        fr"{projName[0]}/2_Production",
        fr"{projName[0]}/3_Mix",
        fr"{projName[0]}/4_Master",
        fr"{projName[0]}/1_OG_Demo"
    ]
  
    for folder in folders:
        item.mkdir(folder, '.')
    exit

def _otf():
    cd fr"{$desktop}\Scripts\Python\Apps\ObsidianTextFormatter"#,"vox", "enter"python","main.py"]#['python', fr"{$desktop}\Scripts\Python\Apps\ObsidianTextFormatter\main.py"]
    vox enter venv
    python "main.py"

def _pullxonsh():
    cd $xonshdir
    git pull

def _pushxonsh(arg):
    cd $xonshdir
    _gitpush(arg)

def _do_newedb(app_name):
    if not app_name:
        return 'You must enter an app name like this : "do_newdb my_app" '
    curl -X POST -H "Content-Type: application/json" -H 'Authorization: Bearer $do_api_key' -d f'{{"name":"{app_name[0]}","region":"nyc1","size":"s-1vcpu-1gb","image":"edgedb", "ssh_keys":[36451354]}}' "https://api.digitalocean.com/v2/droplets"

def _do_deldroplet(droplet_id):
    if not droplet_id:
        return 'You must enter a droplet id like this : "do_deldroplet example_id_1233" \n\nUse "do_alldroplets" command to find droplet ids '
    curl -X DELETE -H "Content-Type: application/json" -H "Authorization: Bearer $do_api_key" f"https://api.digitalocean.com/v2/droplets/{droplet_id[0]}"

def _do_sshlogin(app_ip_addr):
    if not app_ip_addr:
        return 'You must enter the ip address of the app you wish to log in to like so: "do_sshlogin 157.230.53.205"'
    subprocess.run(['powershell.exe',f'ssh -i {str($do_key)} root@{app_ip_addr[0]}'])

def ppjson(jsonStr:str):
    '''pretty prints a JSON string'''
    parsed = json.loads(jsonStr)
    print(json.dumps(parsed, indent=4))

def _mkdjapp(args):
    if not args:
        return '''This command takes two positional arguments - a project name and an app name
        You must enter a project name and app name like so : "mkdjapp myproj myapp" 
        '''
    if len(args) == 1:
        return '''This command takes two positional arguments - a project name and an app name
        You must enter a project name and app name like so : "mkdjapp myproj myapp" 
        '''
    projectName = args[0] 
    appName = args[1] 
    _venv()
    pip install django gunicorn whitenoise black django-livereload-server
    pip freeze > requirements.txt
    subprocess.run([fr"{$pwd()}\venv\Scripts\django-admin.exe", "startproject",projectName])
    $projPath = Path($pwd()) / projectName
    $managePath =  $projPath / "manage.py"
    $appPath = $projPath / appName

    cd $projPath
    subprocess.run(["python.exe",str($managePath),"startapp",appName])

    mkdirs(str($appPath))
    
    Settings(projectName, appName).makeHere(str($projPath))
    Urls(projectName, appName).makeHere(str($projPath))
    BaseHTML(projectName, appName).makeHere(str($appPath / "templates"))
    CreateViewHTML(projectName, appName).makeHere(str($appPath / "templates"))
    ListViewHTML(projectName, appName).makeHere(str($appPath / "templates"))
    UpdateViewHTML(projectName, appName).makeHere(str($appPath / "templates"))

#---------------------------------------------------------
# Powershell aliases
aliases['start'] = _start
aliases['ls'] = "powershell -Command ls"
#---------------------------------------------------------
# Code related aliases
## Python
aliases['pf'] = "pip freeze > requirements.txt"
aliases['venv'] = _venv
aliases['acvenv'] = "vox enter venv"
aliases['main'] = "python main.py"
aliases['mkvenv'] = 'python -m venv venv'
aliases['restartpip'] = 'python -m pip install --upgrade --force-reinstall pip'

## Django
aliases['mkdjapp'] = _mkdjapp

## Xonsh
aliases['ox'] = _openXonsh
aliases['oxrc'] = _openXonshRC#f"powershell -Command code {Path($XONSHRC[0])}"
aliases['od'] = _openDirectory
aliases['rf'] = _runFile
aliases['ef'] = _editFile
aliases['pullxonsh'] = _pullxonsh
aliases['pushxonsh'] = _pushxonsh
aliases['cmds'] = _commands

# Edgedb
aliases['edb'] = 'edgedb'
aliases['edbm1'] = 'edgedb migration create'
aliases['edbm2'] = 'edgedb migrate'
aliases['edbgetschema'] = 'edgedb describe schema'
aliases['edblist'] = 'edgedb instance list'
aliases['edbstart'] = 'edgedb instance start'
aliases['edbinit'] = 'edgedb project init'
#aliases['edbremotemig'] = 'edgedb migrate --dsn edgedb://edgedb:MYPASS@174.138.33.81 --tls-security insecure'

## Git
aliases['gitnew'] = 'gh repo create'
aliases['gitlist'] = 'gh repo list'
aliases['gitpush'] = _gitpush
aliases['gitpull'] = 'git pull'
aliases['clone'] = 'gh repo clone'
aliases['status'] = 'git status'

## Docker

## Digital Ocean
$do_api_key = os.environ['do_api_key']
$do_key = Path($ssh) / 'do_key' 
aliases['do_allactions'] = 'curl -X GET "https://api.digitalocean.com/v2/actions" -H "Authorization: Bearer $do_api_key"'
aliases['do_alldroplets'] = 'curl -X GET "https://api.digitalocean.com/v2/droplets" -H "Authorization: Bearer $do_api_key"'
aliases['do_allsshkeys'] = 'curl -X GET "https://api.digitalocean.com/v2/account/keys" -H "Authorization: Bearer $do_api_key"'
aliases['do_allapps'] = 'curl -X GET -H "Content-Type: application/json" -H "Authorization: Bearer $do_api_key" "https://api.digitalocean.com/v2/apps"'
aliases['do_newedb'] = _do_newedb
aliases['do_deldroplet'] = _do_deldroplet
aliases['do_sshlogin'] = _do_sshlogin
aliases['do_openedbpage'] = 'start https://www.edgedb.com/docs/guides/deployment/digitalocean'
#---------------------------------------------------------
# Apps
aliases['workon'] = _workon
aliases['otf'] = _otf#['cd',fr"{$desktop}\Scripts\Python\Apps\ObsidianTextFormatter","vox", "enter"python","main.py"]#['python', fr"{$desktop}\Scripts\Python\Apps\ObsidianTextFormatter\main.py"]
aliases['inv'] = ['code', fr"{$apps}\Invoice_App"]
aliases['sdb'] = _sdb
aliases['todo'] = ['python', fr'{$apps}\Todo\main.py']

## Music Theory
aliases["minscale"] = ['python', rf'{$apps}\MusicTheory\main.py', 'minscale']
# aliases["majscale"] = : getMajScale,
# aliases["mintri"] = :getMinTriad,
# aliases["majtri"] = : getMajTriad,
# aliases["secdom"] = : getSecDom,
# aliases["dom7"] = : getDomSeventh,
# aliases["maj7"] = : getMajSeventh,
# aliases["min7"] = :getMinSeventh,
# aliases["251"] = : get251,
# aliases["firstdom"] = :getFirstDom,
# aliases["majtomin"] = :majToMin,
# aliases["mintomaj"] = :minToMaj,


#-----------------------------------------------------
# Shortcuts

aliases['helium'] = ['code', fr"{$apps}\helium_WORKING"]
aliases['studiopics'] = _sp

#---------------------------------------------
# VIM
aliases['vimm'] = lambda x: subprocess.run(["powershell.exe",f'vim "{x}"'])

#-------------------------------------
#Misc
aliases['newflproj'] = _newFLProj

