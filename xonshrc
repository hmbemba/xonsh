# XONSH WEBCONFIG START
#$XONSH_COLOR_STYLE = 'dracula'
# XONSH WEBCONFIG END

from dataclasses import dataclass
import os
import subprocess
from pathlib import Path
from FFO.item_class import item
import xonsh
import pprint
import datetime
#from commands import Option

xontrib load vox
pp = pprint.PrettyPrinter(indent=4)
#$PROMPT = '{user}@{hostname}:{cwd}:{env_name: {}}>' 

$home = Path($HOMEPATH[0])
$HOME = $home
$desktop = Path($HOMEPATH[0]) / "Desktop"
$scripts = $desktop / 'Scripts'
$python = $scripts / 'Python'
$ahk = $scripts / 'AHK'
$env = ${...}
$pwd = os.getcwd
$XONSH_SHOW_TRACEBACK = True
$XONSH_TRACEBACK_LOGFILE = str(Path($XONSHRC[0]).parent / "XONSH_TRACEBACK_LOGFILE.txt")#r"C:\ProgramData\xonsh\XONSH_TRACEBACK_LOGFILE.txt#"XONSH_TRACEBACK_LOGFILE.txt"

commands = str(Path($XONSHRC[0]).parent / "commands.py")

def _start(arg):
    if not arg:
        raise Exception("you need an argument")
    subprocess.run(["powershell.exe", f"start-process {arg[0]}"])

def _venv():
    subprocess.run(["python.exe", commands, "make_venv"])
    vox enter "venv"
    subprocess.run(["python.exe", commands, "make_main_dot_py"])
    subprocess.run(["python.exe", commands, "make_vscode_folder"])
    subprocess.run(["python.exe", commands, "make_settings_dot_json"])
    subprocess.run(["python.exe", commands, "make_readme"])
    subprocess.run(["python.exe", commands, "make_gitignore"])
    
    pip install flake8 black pytest
    pip freeze > requirements.txt
    
    git init
    git add . #// this will stage your files for thier first commit
    git status #//see all the files you have staged for commit
    git commit -m "First Commit" #//your first commit with a comment
    
def _gitpush(arg):
    git add '.'
    git status
    git commit -m arg
    git push origin master

def _workon(arg):
    import datetime

    tempProjectsFolder = fr"{$scripts}\Temp_Projects"
    item.FolderExistsOrError(tempProjectsFolder)
    date = datetime.datetime.now().strftime(r'%m-%d-%y_%H-%M') #MM-dd-yy_hh-mmtt
    
    name = f"{arg[0]}_{date}"
    fullPath = Path(f"{tempProjectsFolder}\\{name}")


    if arg[0] == "show":
        subprocess.run(["powershell.exe", f"start-process {tempProjectsFolder}"])
        exit
    
    else:
        Path.mkdir(fullPath)
        subprocess.run(["powershell.exe", f"code {fullPath}"])
        exit 

def _commands():
    pp.pprint(list(__xonsh__.aliases)[52:])

def _sdb(arg):
    cd fr"{$desktop}\Scripts\Python\Apps\Songdb"
    vox enter venv

def timestamp() -> str:
    dt = datetime.datetime.now()
    return dt.strftime("%m_%d_%Y-%I_%M%p")

def _sp():
    if $COMPUTERNAME != 'DESKTOP-I5FROLF':
        raise Exception('Wrong Computer')
    t = timestamp()
    item.mkdir(f"StudioPics_{t}", r"V:\Projects\IG Content\Studio Pics")
    loc = fr"V:\Projects\IG Content\Studio Pics\StudioPics_{t}"
    item.mkdir(f"Unedited", loc)
    item.mkdir(f"Edited", loc)
    subprocess.run(["powershell.exe", f'start-process "{loc}"'])
    subprocess.run(["powershell.exe", fr'start-process "C:\ProgramData\Microsoft\Windows\Start Menu\Luminar AI.lnk"'])

def _openDirectory(arg):
    def help():
        print("Open Directory Coomnad\n")
        print('Available Options\n')
        for option in options:
            print('\t',option['key'], ' : ', f'"{option["path"]}"',' | ', option['note'], '\n' )

    options = [
        {
            'key':'apps',
            'path':fr"{$desktop}\Scripts\Python\Apps",
            'note':'Apps folder in Python dir'
        },
        {
            'key':'scripts',
            'path':$scripts,
            'note':'Scripts folder'
        },
        {
            'key':'py',
            'path':$python,
            'note':'Python dir in Scripts folder'
        },
        {
            'key':'python',
            'path':$python,
            'note':'Python dir in Scripts folder'
        },
        {
            'key':'ahk',
            'path':$ahk,
            'note':'AHK dir in Scripts folder'
        },
        {
            'key':'stupics',
            'path':r"V:\Projects\IG Content\Studio Pics",
            'note':'Studio Pics Folder'
        }
    ]

    if not arg:
        help()
    else:
        if arg[0] not in [option['key'] for option in options]:
            help()
        else:
            for option in options:
                if arg[0] == option['key']:
                    subprocess.run(["powershell.exe", f'start-process "{option["path"]}" '])

def _runFile(arg):
    def help():
        print("Run File Command\n")
        print('Available Options\n')
        for option in options:
            print('\t',option['key'], ' : ', f'"{option["path"]}"',' | ', option['note'], '\n' )

    options = [
        {
            'key':'pysnip',
            'path':fr"{$ahk}\Code_Snippets\Python_Snippets\Python_Snippets.ahk",
            'note':'Python Snippets'
        },

    ]

    if not arg:
        help()
    else:
        if arg[0] not in [option['key'] for option in options]:
            help()
        else:
            for option in options:
                if arg[0] == option['key']:
                    subprocess.run(["powershell.exe", f'start-process "{option["path"]}" '])


def _editFile(arg):
    def help():
        print("Edit File Command\n")
        print('Available Options\n')
        for option in options:
            print('\t',option['key'],' : ', f'"{option["note"]}"', '\n' )
    
    options = [
        {
            'key':'pysnip',
            'editStr':fr"code {$ahk}\Code_Snippets\Python_Snippets\Python_Snippets.ahk",
            'note':'Edit Python Snippets'
        },
        {
            'key':'sdb',
            'editStr':fr"code {$desktop}\Scripts\Python\Apps\Songdb",
            'note':'Edit Songdb'
        },
        {
            'key':'todo',
            'editStr':fr"code C:\Users\hmbem\Desktop\Scripts\Python\Apps\Todo\TaskInstances.py",
            'note':'Edit Todo App'
        },
    ]

    if not arg:
        help()
    else:
        if arg[0] not in [option['key'] for option in options]:
            help()
        else:
            for option in options:
                if arg[0] == option['key']:
                    filePath = option['editStr'].split(' ')[1]
                    if not Path(filePath).exists():
                        raise Exception(f'Path "{filePath}" not found')
                    subprocess.run(["powershell.exe", f'{option["editStr"]}'])

#---------------------------------------------------------
# Powershell aliases
aliases['start'] = _start
aliases['ls'] = "powershell -Command ls"
#---------------------------------------------------------
# Code related aliases
## Python
aliases['pf'] = "pip freeze > requirements.txt"
aliases['venv'] = _venv
aliases['acvenv'] = "vox enter venv"
aliases['main'] = "python main.py"
aliases['mkvenv'] = 'python -m venv venv'

## Xonsh
aliases['ox'] = f"powershell -Command code {Path($XONSHRC[0]).parent}"
aliases['oxrc'] = f"powershell -Command code {Path($XONSHRC[0])}"
aliases['od'] = _openDirectory
aliases['rf'] = _runFile
aliases['ef'] = _editFile
aliases['cmds'] = _commands

# Edgedb
aliases['edb'] = 'edgedb'
aliases['edbm1'] = 'edgedb migration create'
aliases['edbm2'] = 'edgedb migrate'
aliases['edbgetschema'] = 'edgedb describe schema'
aliases['edblist'] = 'edgedb instance list'
aliases['edbstart'] = 'edgedb instance start'

## Git
aliases['gitnew'] = 'gh repo create'
aliases['gitlist'] = 'gh repo list'
aliases['gitpush'] = _gitpush
aliases['clone'] = 'gh repo clone'
aliases['status'] = 'git status'

#---------------------------------------------------------
# Apps
aliases['workon'] = _workon
aliases['otf'] = ['python', fr"{$desktop}\Scripts\Python\Apps\ObsidianTextFormatter\main.py"]
aliases['inv'] = ['code', fr"{$desktop}\Scripts\Python\Apps\Invoice_App"]
aliases['sdb'] = _sdb
aliases['todo'] = ['python', r'C:\Users\hmbem\Desktop\Scripts\Python\Apps\Todo\main.py']

#-----------------------------------------------------
# Shortcuts

aliases['helium'] = ['code', fr"{$python}\Apps\helium_WORKING"]
aliases['studiopics'] = _sp

